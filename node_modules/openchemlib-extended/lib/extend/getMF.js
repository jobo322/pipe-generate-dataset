'use strict';

/**
 * Calculate the molecular formula in 'chemcalc' notation taking into account fragments, isotopes and charges
 * @returns {String}
 */

module.exports = function getMF() {
    var entries = this.getFragments();
    var result = {};
    var parts = [];
    var allAtoms = [];
    entries.forEach(function (entry) {
        var mf = getFragmentMF(entry);
        parts.push(mf);
    });

    var counts = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var part = _step.value;

            if (!counts[part]) counts[part] = 0;
            counts[part]++;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    parts = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = Object.keys(counts).sort()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            if (counts[key] > 1) {
                parts.push(counts[key] + key);
            } else {
                parts.push(key);
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    result.parts = parts;
    result.mf = getMF(allAtoms);
    return result;

    function getFragmentMF(molecule) {
        var atoms = [];
        for (var i = 0; i < molecule.getAllAtoms(); i++) {
            var atom = {};
            atom.charge = molecule.getAtomCharge(i);
            atom.label = molecule.getAtomLabel(i);
            atom.mass = molecule.getAtomMass(i);
            atom.implicitHydrogens = molecule.getImplicitHydrogens(i);
            atoms.push(atom);
            allAtoms.push(atom);
        }
        return getMF(atoms);
    }

    function getMF(atoms) {
        var charge = 0;
        var mfs = {};
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = atoms[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var atom = _step3.value;

                var label = atom.label;
                charge += atom.charge;
                if (atom.mass) {
                    label = '[' + atom.mass + label + ']';
                }
                var mfAtom = mfs[label];
                if (!mfAtom) {
                    mfs[label] = 0;
                }
                mfs[label] += 1;
                if (atom.implicitHydrogens) {
                    if (!mfs.H) mfs.H = 0;
                    mfs.H += atom.implicitHydrogens;
                }
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        var mf = '';
        var keys = Object.keys(mfs).sort(function (a, b) {
            if (a === 'C') return -1;
            if (b === 'C') return 1;
            if (a === 'H' && b !== 'C') return -1;
            if (a !== 'C' && b === 'H') return 1;
            if (a < b) return -1;
            return 1;
        });
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var key = _step4.value;

                mf += key;
                if (mfs[key] > 1) mf += mfs[key];
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }

        if (charge > 0) {
            mf += '(+' + (charge > 1 ? charge : '') + ')';
        } else if (charge < 0) {
            mf += '(' + (charge < -1 ? charge : '-') + ')';
        }
        return mf;
    }
};