'use strict';

module.exports = function getGroupedDiastereotopicAtomIDs() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var label = options.atomLabel;

    var diaIDs = this.getDiastereotopicAtomIDs(options);
    var diaIDsObject = {};

    for (var i = 0; i < diaIDs.length; i++) {
        if (!label || this.getAtomLabel(i) === label) {
            var diaID = diaIDs[i];
            if (!diaIDsObject[diaID]) {
                diaIDsObject[diaID] = {
                    counter: 1,
                    atoms: [i],
                    oclID: diaID,
                    atomLabel: this.getAtomLabel(i),
                    _highlight: [diaID]
                };
            } else {
                diaIDsObject[diaID].counter++;
                diaIDsObject[diaID].atoms.push(i);
            }
        }
    }

    var diaIDsTable = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.keys(diaIDsObject)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            diaIDsTable.push(diaIDsObject[key]);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return diaIDsTable;
};