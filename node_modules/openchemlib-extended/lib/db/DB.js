'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _parseSDF = require('sdf-parser');
var Papa = require('papaparse');

var getMoleculeCreators = require('./moleculeCreators');

module.exports = function (OCL) {
    var cHelperRings = OCL.Molecule.cHelperRings;
    var Molecule = OCL.Molecule;

    var moleculeCreators = getMoleculeCreators(Molecule);

    var defaultDBOptions = {
        length: 0,
        computeProperties: false
    };

    var defaultSDFOptions = {
        onStep: function onStep() /*current, total*/{
            // empty function
        }
    };

    var defaultCSVOptions = {
        header: true,
        dynamicTyping: true,
        skipEmptyLines: true,
        onStep: function onStep() /*current, total*/{
            // empty function
        }
    };

    var defaultSearchOptions = {
        format: 'oclid',
        mode: 'substructure',
        limit: 0
    };

    var MoleculeDB = function () {
        function MoleculeDB(options) {
            _classCallCheck(this, MoleculeDB);

            options = Object.assign({}, defaultDBOptions, options);
            this.data = new Array(options.length);
            this.molecules = new Array(options.length);
            this.statistics = null;
            this.length = 0;
            this.computeProperties = !!options.computeProperties;
            this.searcher = null;
        }

        _createClass(MoleculeDB, [{
            key: 'push',
            value: function push(molecule, data) {
                if (data === undefined) data = {};
                this.molecules[this.length] = molecule;
                // ensure helper arrays needed for substructure search
                molecule.ensureHelperArrays(cHelperRings);
                var molecularFormula = void 0;
                if (!molecule.index) {
                    molecule.index = molecule.getIndex();
                }
                if (!molecule.idcode) {
                    molecule.idcode = molecule.getIDCode();
                }
                if (!molecule.mw) {
                    molecularFormula = molecule.getMolecularFormula();
                    molecule.mw = molecularFormula.relativeWeight;
                }
                this.data[this.length++] = data;
                if (this.computeProperties) {
                    if (!molecularFormula) {
                        molecularFormula = molecule.getMolecularFormula();
                    }
                    var properties = new OCL.MoleculeProperties(molecule);
                    data.properties = {
                        absoluteWeight: molecularFormula.absoluteWeight,
                        relativeWeight: molecule.mw,
                        formula: molecularFormula.formula,
                        acceptorCount: properties.acceptorCount,
                        donorCount: properties.donorCount,
                        logP: properties.logP,
                        logS: properties.logS,
                        polarSurfaceArea: properties.polarSurfaceArea,
                        rotatableBondCount: properties.rotatableBondCount,
                        stereoCenterCount: properties.stereoCenterCount
                    };
                }
            }
        }, {
            key: 'search',
            value: function search(query, options) {
                options = Object.assign({}, defaultSearchOptions, options);

                if (typeof query === 'string') {
                    query = moleculeCreators.get(options.format.toLowerCase())(query);
                } else if (!(query instanceof Molecule)) {
                    throw new TypeError('toSearch must be a Molecule or string');
                }

                var result = void 0;
                switch (options.mode.toLowerCase()) {
                    case 'exact':
                        result = this.exactSearch(query, options.limit);
                        break;
                    case 'substructure':
                        result = this.subStructureSearch(query, options.limit);
                        break;
                    case 'similarity':
                        result = this.similaritySearch(query, options.limit);
                        break;
                    default:
                        throw new Error('unknown search mode: ' + options.mode);
                }
                return result;
            }
        }, {
            key: 'exactSearch',
            value: function exactSearch(query, limit) {
                var queryIdcode = query.getIDCode();
                var result = new MoleculeDB();
                limit = limit || Number.MAX_SAFE_INTEGER;
                for (var i = 0; i < this.length; i++) {
                    if (this.molecules[i].idcode === queryIdcode) {
                        result.push(this.molecules[i], this.data[i]);
                        if (result.length >= limit) break;
                    }
                }
                return result;
            }
        }, {
            key: 'subStructureSearch',
            value: function subStructureSearch(query, limit) {
                var needReset = false;

                if (!query.isFragment()) {
                    needReset = true;
                    query.setFragment(true);
                }

                var queryMW = getMW(query);

                var queryIndex = query.getIndex();
                var searcher = this.getSearcher();

                searcher.setFragment(query, queryIndex);
                var searchResult = [];
                for (var i = 0; i < this.length; i++) {
                    searcher.setMolecule(this.molecules[i], this.molecules[i].index);
                    if (searcher.isFragmentInMolecule()) {
                        searchResult.push([this.molecules[i], i]);
                    }
                }
                searchResult.sort(function (a, b) {
                    return Math.abs(queryMW - a[0].mw) - Math.abs(queryMW - b[0].mw);
                });

                var length = Math.min(limit || searchResult.length, searchResult.length);
                var result = new MoleculeDB({ length: length });
                for (var _i = 0; _i < length; _i++) {
                    result.push(this.molecules[searchResult[_i][1]], this.data[searchResult[_i][1]]);
                }

                if (needReset) {
                    query.setFragment(false);
                }
                return result;
            }
        }, {
            key: 'similaritySearch',
            value: function similaritySearch(query, limit) {
                var queryIndex = query.getIndex();

                var queryMW = getMW(query);
                var queryIDCode = query.getIDCode();

                var searchResult = new Array(this.length);
                var similarity = void 0;
                for (var i = 0; i < this.length; i++) {
                    if (this.molecules[i].idcode === queryIDCode) {
                        similarity = 1e10;
                    } else {
                        similarity = OCL.SSSearcherWithIndex.getSimilarityTanimoto(queryIndex, this.molecules[i].index) * 100000 - Math.abs(queryMW - this.molecules[i].mw) / 1000;
                    }
                    searchResult[i] = [similarity, i];
                }
                searchResult.sort(function (a, b) {
                    return b[0] - a[0];
                });

                var length = Math.min(limit || searchResult.length, searchResult.length);
                var result = new MoleculeDB({ length: length });
                for (var _i2 = 0; _i2 < length; _i2++) {
                    result.push(this.molecules[searchResult[_i2][1]], this.data[searchResult[_i2][1]]);
                }
                return result;
            }
        }, {
            key: 'getSearcher',
            value: function getSearcher() {
                return this.searcher || (this.searcher = new OCL.SSSearcherWithIndex());
            }
        }], [{
            key: 'parseSDF',
            value: function parseSDF(sdf, options) {
                if (typeof sdf !== 'string') {
                    throw new TypeError('sdf must be a string');
                }
                options = Object.assign({}, defaultSDFOptions, options);
                return new Promise(function (resolve, reject) {
                    var parsed = _parseSDF(sdf);
                    var molecules = parsed.molecules;
                    var db = new MoleculeDB(options);
                    db.statistics = parsed.statistics;
                    var i = 0;
                    var l = molecules.length;
                    parseNext();
                    function parseNext() {
                        if (i === l) {
                            resolve(db);
                            return;
                        }
                        try {
                            db.push(Molecule.fromMolfile(molecules[i].molfile), molecules[i]);
                        } catch (e) {
                            reject(e);
                            return;
                        }
                        options.onStep(++i, l);
                        setImmediate(parseNext);
                    }
                });
            }
        }, {
            key: 'parseCSV',
            value: function parseCSV(csv, options) {
                if (typeof csv !== 'string') {
                    throw new TypeError('csv must be a string');
                }
                options = Object.assign({}, defaultCSVOptions, options);
                return new Promise(function (resolve, reject) {
                    var parsed = Papa.parse(csv, options);
                    var fields = parsed.meta.fields;
                    var stats = new Array(fields.length);
                    var firstElement = parsed.data[0];
                    var datatype = void 0,
                        datafield = void 0;
                    for (var _i3 = 0; _i3 < fields.length; _i3++) {
                        stats[_i3] = {
                            label: fields[_i3],
                            isNumeric: typeof firstElement[fields[_i3]] === 'number'
                        };
                        var lowerField = fields[_i3].toLowerCase();
                        if (moleculeCreators.has(lowerField)) {
                            datatype = moleculeCreators.get(lowerField);
                            datafield = fields[_i3];
                        }
                    }
                    if (!datatype) {
                        throw new Error('this document does not contain any molecule field');
                    }
                    var db = new MoleculeDB(options);
                    db.statistics = stats;

                    var i = 0;
                    var l = parsed.data.length;
                    parseNext();
                    function parseNext() {
                        if (i === l) {
                            resolve(db);
                            return;
                        }
                        try {
                            db.push(datatype(parsed.data[i][datafield]), parsed.data[i]);
                        } catch (e) {
                            reject(e);
                            return;
                        }
                        options.onStep(++i, l);
                        setImmediate(parseNext);
                    }
                });
            }
        }]);

        return MoleculeDB;
    }();

    return MoleculeDB;
};

function getMW(query) {
    var copy = query.getCompactCopy();
    copy.setFragment(false);
    return copy.getMolecularFormula().relativeWeight;
}